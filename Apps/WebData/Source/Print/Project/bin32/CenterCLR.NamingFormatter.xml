<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CenterCLR.NamingFormatter</name>
    </assembly>
    <members>
        <member name="T:CenterCLR.Named">
            <summary>
            NamingFormatter library class.
            </summary>
            <remarks>
            NamingFormatter library is extend the String.Format methods.
            String.Format replacement "{0}...{n}" is require fixed array index number.
            This library can use named key index (format-key: "{abc}...{XYZ}") with key-value collection.
            </remarks>
            <example>
            <code>
            // format-key-value dictionary.
            var keyValues = new Dictionary&lt;string, object&gt;()
            {
                { "abcde", 123 },
                { "fgh", DateTime.Now },
                { "ijkl", 456.789 },
                // ...
            };
            
            // Format string by format-key-values.
            var result = Named.Format("AAA{fgh:R}BBB{abcde}CCC{ijkl:E}", keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.WriteFormat(System.IO.TextWriter,System.String,System.Func{System.String,System.Object})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="tw">Formatted text writer.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="selector">format-key to value selector delegate.</param>
            <example>
            <code>
            // Format string by format-key-values.
            var tw = new StringWriter();
            tw.WriteFormat(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                key =>
                    (key == "abcde") ? 123 :
                    (key == "fgh") ? DateTime.Now :
                    (key == "ijkl") ? 456.789 :
                    "(Unknown)");
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.IFormatProvider,System.String,System.Func{System.String,System.Object})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="selector">format-key to value selector delegate.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // Format string by format-key-values.
            var result = new CultureInfo("fr-FR").Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                key =>
                    (key == "abcde") ? 123 :
                    (key == "fgh") ? DateTime.Now :
                    (key == "ijkl") ? 456.789 :
                    "(Unknown)");
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.String,System.Func{System.String,System.Object})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="format">The format string (can include format-key).</param>
            <param name="selector">format-key to value selector delegate.</param>
            <returns>Formatted string.</returns>
            <remarks>
            This method is minimum basic interface.
            "selector" delegate will be past "format-key" from argument,
            you must return a value of pairing format-key.
            </remarks>
            <example>
            <code>
            // Format string by format-key-values.
            var result = Named.Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                key =>
                    (key == "abcde") ? 123 :
                    (key == "fgh") ? DateTime.Now :
                    (key == "ijkl") ? 456.789 :
                    "(Unknown)");
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.WriteFormat(System.IO.TextWriter,System.String,System.Func{System.String,System.String,System.Boolean},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="tw">Format text writer.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="predicate">format-key equality predicate delegate.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <example>
            <code>
            // format-key-value array.
            var keyValues = new[]
            {
                new KeyValuePair&lt;string, object&gt;("abcde", 123),
                new KeyValuePair&lt;string, object&gt;("fgh", DateTime.Now),
                new KeyValuePair&lt;string, object&gt;("ijkl", 456.789),
                // ...
            };
            
            // Format string by format-key-values with custom comparator expression.
            var tw = new StringWriter();
            var result = tw.WriteFormat(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                (key0, key1) => key0 == key1,
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.WriteFormat(System.IO.TextWriter,System.String,System.Func{System.String,System.String,System.Boolean},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="tw">Format text writer.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="predicate">format-key equality predicate delegate.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // Format string by format-key-values with custom comparator expression.
            var tw = new StringWriter();
            tw.WriteFormat(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                (key0, key1) => key0 == key1,
                Named.Pair("abcde", 123),
            	Named.Pair("fgh", DateTime.Now),
            	Named.Pair("ijkl", 456.789));
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.IFormatProvider,System.String,System.Func{System.String,System.String,System.Boolean},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="predicate">format-key equality predicate delegate.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value array.
            var keyValues = new[]
            {
                new KeyValuePair&lt;string, object&gt;("abcde", 123),
                new KeyValuePair&lt;string, object&gt;("fgh", DateTime.Now),
                new KeyValuePair&lt;string, object&gt;("ijkl", 456.789),
                // ...
            };
            
            // Format string by format-key-values with custom comparator expression.
            var result = new CultureInfo("fr-FR").Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                (key0, key1) => key0 == key1,
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.String,System.Func{System.String,System.String,System.Boolean},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="format">The format string (can include format-key).</param>
            <param name="predicate">format-key equality predicate delegate.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value array.
            var keyValues = new[]
            {
                new KeyValuePair&lt;string, object&gt;("abcde", 123),
                new KeyValuePair&lt;string, object&gt;("fgh", DateTime.Now),
                new KeyValuePair&lt;string, object&gt;("ijkl", 456.789),
                // ...
            };
            
            // Format string by format-key-values with custom comparator expression.
            var result = Named.Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                (key0, key1) => key0 == key1,
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.IFormatProvider,System.String,System.Func{System.String,System.String,System.Boolean},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="predicate">format-key equality predicate delegate.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // Format string by format-key-values with custom comparator expression.
            var result = new CultureInfo("fr-FR").Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                (key0, key1) => key0 == key1,
                Named.Pair("abcde", 123),
            	Named.Pair("fgh", DateTime.Now),
            	Named.Pair("ijkl", 456.789));
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.String,System.Func{System.String,System.String,System.Boolean},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="format">The format string (can include format-key).</param>
            <param name="predicate">format-key equality predicate delegate.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // Format string by format-key-values with custom comparator expression.
            var result = Named.Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                (key0, key1) => key0 == key1,
                Named.Pair("abcde", 123),
            	Named.Pair("fgh", DateTime.Now),
            	Named.Pair("ijkl", 456.789));
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.WriteFormat(System.IO.TextWriter,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="tw">Format text writer.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value dictionary.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value dictionary.
            var keyValues = new Dictionary&lt;string, object&gt;()
            {
                { "abcde", 123 },
                { "fgh", DateTime.Now },
                { "ijkl", 456.789 },
                // ...
            };
            
            // Format string by format-key-values.
            var tw = new StringWriter();
            tw.WriteFormat(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.IFormatProvider,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value dictionary.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value dictionary.
            var keyValues = new Dictionary&lt;string, object&gt;()
            {
                { "abcde", 123 },
                { "fgh", DateTime.Now },
                { "ijkl", 456.789 },
                // ...
            };
            
            // Format string by format-key-values.
            var result = new CultureInfo("fr-FR").Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value dictionary.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value dictionary.
            var keyValues = new Dictionary&lt;string, object&gt;()
            {
                { "abcde", 123 },
                { "fgh", DateTime.Now },
                { "ijkl", 456.789 },
                // ...
            };
            
            // Format string by format-key-values.
            var result = Named.Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.WriteFormat(System.IO.TextWriter,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="tw">Format text writer.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value dictionary.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value dictionary.
            var keyValues = new Dictionary&lt;string, object&gt;()
            {
                { "abcde", 123 },
                { "fgh", DateTime.Now },
                { "ijkl", 456.789 },
                // ...
            };
            
            // Format string by format-key-values.
            var tw = new StringWriter();
            tw.WriteFormat(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.IFormatProvider,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value dictionary.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value dictionary.
            IDictionary&lt;string, object&gt; keyValues = new Dictionary&lt;string, object&gt;()
            {
                { "abcde", 123 },
                { "fgh", DateTime.Now },
                { "ijkl", 456.789 },
                // ...
            };
            
            // Format string by format-key-values.
            var result = new CultureInfo("fr-FR").Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value dictionary.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value dictionary.
            IDictionary&lt;string, object&gt; keyValues = new Dictionary&lt;string, object&gt;()
            {
                { "abcde", 123 },
                { "fgh", DateTime.Now },
                { "ijkl", 456.789 },
                // ...
            };
            
            // Format string by format-key-values.
            var result = Named.Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.WriteFormat(System.IO.TextWriter,System.String,System.Collections.Generic.IEqualityComparer{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="tw">Format text writer.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="comparer">format-key equality comparer.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value array.
            var keyValues = new[]
            {
                new KeyValuePair&lt;string, object&gt;("abCDe", 123),
                new KeyValuePair&lt;string, object&gt;("Fgh", DateTime.Now),
                new KeyValuePair&lt;string, object&gt;("IjKl", 456.789),
                // ...
            };
            
            // Format string by format-key-values with key ignoring case.
            var tw = new StringWriter();
            tw.WriteFormat(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                StringComparer.CurrentCultureIgnoreCase,
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.WriteFormat(System.IO.TextWriter,System.String,System.Collections.Generic.IEqualityComparer{System.String},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="tw">Format text writer.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="comparer">format-key equality comparer.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value array.
            var keyValues = new[]
            {
                new KeyValuePair&lt;string, object&gt;("abCDe", 123),
                new KeyValuePair&lt;string, object&gt;("Fgh", DateTime.Now),
                new KeyValuePair&lt;string, object&gt;("IjKl", 456.789),
                // ...
            };
            
            // Format string by format-key-values with key ignoring case.
            var tw = new StringWriter();
            tw.WriteFormat(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                StringComparer.CurrentCultureIgnoreCase,
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.IFormatProvider,System.String,System.Collections.Generic.IEqualityComparer{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="comparer">format-key equality comparer.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value array.
            var keyValues = new[]
            {
                new KeyValuePair&lt;string, object&gt;("abCDe", 123),
                new KeyValuePair&lt;string, object&gt;("Fgh", DateTime.Now),
                new KeyValuePair&lt;string, object&gt;("IjKl", 456.789),
                // ...
            };
            
            // Format string by format-key-values with key ignoring case.
            var result = new CultureInfo("fr-FR").Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                StringComparer.CurrentCultureIgnoreCase,
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.String,System.Collections.Generic.IEqualityComparer{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="format">The format string (can include format-key).</param>
            <param name="comparer">format-key equality comparer.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value array.
            var keyValues = new[]
            {
                new KeyValuePair&lt;string, object&gt;("abCDe", 123),
                new KeyValuePair&lt;string, object&gt;("Fgh", DateTime.Now),
                new KeyValuePair&lt;string, object&gt;("IjKl", 456.789),
                // ...
            };
            
            // Format string by format-key-values with key ignoring case.
            var result = Named.Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                StringComparer.CurrentCultureIgnoreCase,
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.IFormatProvider,System.String,System.Collections.Generic.IEqualityComparer{System.String},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="comparer">format-key equality comparer.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // Format string by format-key-values with key ignoring case.
            var result = new CultureInfo("fr-FR").Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                StringComparer.CurrentCultureIgnoreCase,
                Named.Pair("abcde", 123),
            	Named.Pair("fgh", DateTime.Now),
            	Named.Pair("ijkl", 456.789));
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.String,System.Collections.Generic.IEqualityComparer{System.String},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="format">The format string (can include format-key).</param>
            <param name="comparer">format-key equality comparer.</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // Format string by format-key-values with key ignoring case.
            var result = Named.Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                StringComparer.CurrentCultureIgnoreCase,
                Named.Pair("abcde", 123),
            	Named.Pair("fgh", DateTime.Now),
            	Named.Pair("ijkl", 456.789));
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.WriteFormat(System.IO.TextWriter,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="tw">Format text writer.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value array.
            var keyValues = new[]
            {
                new KeyValuePair&lt;string, object&gt;("abcde", 123),
                new KeyValuePair&lt;string, object&gt;("fgh", DateTime.Now),
                new KeyValuePair&lt;string, object&gt;("ijkl", 456.789),
                // ...
            };
            
            // Format string by format-key-values.
            var tw = new StringWriter();
            tw.WriteFormat(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.WriteFormat(System.IO.TextWriter,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="tw">Format text writer.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // Format string by format-key-values.
            var result = new CultureInfo("fr-FR").Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                Named.Pair("abcde", 123),
            	Named.Pair("fgh", DateTime.Now),
            	Named.Pair("ijkl", 456.789));
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.IFormatProvider,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value array.
            var keyValues = new[]
            {
                new KeyValuePair&lt;string, object&gt;("abcde", 123),
                new KeyValuePair&lt;string, object&gt;("fgh", DateTime.Now),
                new KeyValuePair&lt;string, object&gt;("ijkl", 456.789),
                // ...
            };
            
            // Format string by format-key-values.
            var result = new CultureInfo("fr-FR").Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // format-key-value array.
            var keyValues = new[]
            {
                new KeyValuePair&lt;string, object&gt;("abcde", 123),
                new KeyValuePair&lt;string, object&gt;("fgh", DateTime.Now),
                new KeyValuePair&lt;string, object&gt;("ijkl", 456.789),
                // ...
            };
            
            // Format string by format-key-values.
            var result = Named.Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                keyValues);
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.IFormatProvider,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // Format string by format-key-values.
            var result = new CultureInfo("fr-FR").Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                Named.Pair("abcde", 123),
            	Named.Pair("fgh", DateTime.Now),
            	Named.Pair("ijkl", 456.789));
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Format(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Format string with named format-key.
            </summary>
            <param name="format">The format string (can include format-key).</param>
            <param name="keyValues">Key-value enumerator.</param>
            <returns>Formatted string.</returns>
            <example>
            <code>
            // Format string by format-key-values.
            var result = Named.Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                Named.Pair("abcde", 123),
            	Named.Pair("fgh", DateTime.Now),
            	Named.Pair("ijkl", 456.789));
            </code>
            </example>
        </member>
        <member name="M:CenterCLR.Named.Pair(System.String,System.Object)">
            <summary>
            Key-value creator (alias KeyValuePair).
            </summary>
            <param name="key">Key string</param>
            <param name="value">Value</param>
            <returns>KeyValuePair instance.</returns>
            <example>
            <code>
            // Format string by format-key-values.
            var result = Named.Format(
                "AAA{fgh:R}BBB{abcde}CCC{ijkl:E}",
                Named.Pair("abcde", 123),
            	Named.Pair("fgh", DateTime.Now),
            	Named.Pair("ijkl", 456.789));
            </code>
            </example>
        </member>
    </members>
</doc>
